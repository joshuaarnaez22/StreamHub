// This is your Prisma schema file

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  username       String  @unique
  imageUrl       String?
  externalUserId String  @unique
  bio            String?

  followings Follow[] @relation("Following") // Users who follows this user

  followers Follow[] @relation("Followers") // Users whos following this user

  blocking Block[] @relation("Blocking") // Users who this users blocked

  blockedBy Block[] @relation("BlockedBy") // Uses who blocked this user

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  thumbnailUrl String?

  ingressId String?
  serverUrl String?
  streamKey String?

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([name])
}

model Follow {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  followerId String @db.ObjectId
  follower   User   @relation(name: "Followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String @db.ObjectId
  following   User   @relation(name: "Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String @db.ObjectId
  blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedId String @db.ObjectId
  blocked   User   @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockedId])
  @@index([blockerId])
}
